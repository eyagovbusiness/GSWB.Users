// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"fmt"
	"github.com/eyagovbusiness/GSWB.Users/src/application/useCases/user"
	"github.com/eyagovbusiness/GSWB.Users/src/infrastructure/persistence/models"
	"github.com/eyagovbusiness/GSWB.Users/src/infrastructure/persistence/repositories"
	"github.com/eyagovbusiness/GSWB.Users/src/presentation/http"
	"github.com/eyagovbusiness/GSWB.Users/src/presentation/http/handler"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"os"
)

// Injectors from wire.go:

func InitializeServer() (*http.Server, error) {
	db, err := ProvideDatabase()
	if err != nil {
		return nil, err
	}
	iUserRepository := repositories.NewGormUserRepository(db)
	createUserUseCase := user.NewCreateUserUseCase(iUserRepository)
	listUsersUseCase := user.NewListUsersUseCase(iUserRepository)
	userHandler := handler.NewUserHandler(createUserUseCase, listUsersUseCase)
	server := http.NewServer(userHandler)
	return server, nil
}

// wire.go:

func ProvideDatabase() (*gorm.DB, error) {

	host := os.Getenv("DB_HOST")
	port := os.Getenv("DB_PORT")
	user2 := os.Getenv("DB_USER")
	password := os.Getenv("DB_PASSWORD")
	dbname := os.Getenv("DB_NAME")
	fmt.Println("[ENV] DB_HOST =", host)
	fmt.Println("[ENV] DB_PORT =", port)
	fmt.Println("[ENV] DB_USER =", user2)
	fmt.Println("[ENV] DB_PASSWORD =", password)
	fmt.Println("[ENV] DB_NAME =", dbname)

	dsn := fmt.Sprintf("host=%s port=%s user=%s dbname=%s password=%s",
		host, port, user2, dbname, password)
	fmt.Println("[GORM] Using DSN:", dsn)

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		return nil, fmt.Errorf("failed to initialize database, got error %w", err)
	}

	if err := db.AutoMigrate(&models.UserModel{}); err != nil {
		return nil, err
	}

	return db, nil
}
